import edu.princeton.cs.introcs.StdDraw;
import java.awt.event.KeyEvent;

public class Graphe {


	
	public static void afficher_fond() {
				//Fond marin ou les plongeurs se baladent
			StdDraw.picture(0, 0, "fondmarin.jpg",Phase.LARGEUR, Phase.HAUTEUR);
				//Rectangle pour la plage
			StdDraw.picture(0, Phase.Ymax-0.7, "plage.jpg",Phase.LARGEUR, 0.6);
				//Bois
			StdDraw.picture(-4 , Phase.Ymax+3 , "arriere_plan.jpg",2, Phase.HAUTEUR+0.8);
			StdDraw.picture(-2 , Phase.Ymax+3 , "arriere_plan.jpg",2, Phase.HAUTEUR+0.8);
			StdDraw.picture(0 , Phase.Ymax+3 , "arriere_plan.jpg",2, Phase.HAUTEUR+0.8);
			StdDraw.picture(2 , Phase.Ymax+3 , "arriere_plan.jpg",2, Phase.HAUTEUR+0.8);
			StdDraw.picture(-4.4 , 3.6, "oxy.png",1, 0.2);
				//contour pr le rectangle d'oxygene
			StdDraw.setPenColor(StdDraw.WHITE);
			StdDraw.filledRectangle(-0.5, 3.6, 3.3, 0.1);//contour pour le rectangle d'oxygene
			StdDraw.setPenColor(StdDraw.BLUE);
			StdDraw.rectangle(-0.5, 3.6, 3.31, 0.11);
	}
	public static void afficher_tableau(Joueur A, Joueur B) { //sur le cote du gauche avec les phases et le score des joueurs
			//Rectangle bois sur le cote
		StdDraw.picture(-4, 0, "arriere_plan.jpg",2,Phase.HAUTEUR+0.8);
		StdDraw.setPenColor(StdDraw.BLUE);
		StdDraw.text(-4.4,3, "Phase de jeu : ");
		StdDraw.text(-3.7,3, Integer.toString(Phase.phase));
		StdDraw.text(-4.3,1, "Score "+A.name+" : ");
		StdDraw.text(-4.3+0.9,1, Integer.toString(A.score));
		StdDraw.text(-4.3,-1, "Score "+B.name+" : ");
		StdDraw.text(-4.3+0.9,-1, Integer.toString(B.score));
		StdDraw.setPenColor(StdDraw.WHITE);
		
	}
	
	public static void afficher_menu() {
		StdDraw.setCanvasSize(720, 670); //pour aggrandir ou elargir la fenetre
		StdDraw.setXscale(Phase.Xmin,Phase.Xmax); //permet de savoir de ou a ou on va
		StdDraw.setYscale(Phase.Ymin,Phase.Ymax);
		StdDraw.picture(-1, 1, "ecran.jpg",Phase.LARGEUR+2,Phase.HAUTEUR+2);
		StdDraw.picture(-1, 2, "image.png",4,2);
		StdDraw.picture(-3, -1.5, "parechemin.png",3,1);
		StdDraw.picture(1, -1.5, "parechemin.png",3,1);
		StdDraw.picture(-3, -1.6, "single.png",2,0.5);
		StdDraw.picture(1, -1.6, "multi.png",2,0.5);
	}
	
	public static void choix_singlePlayer() throws InterruptedException{
		StdDraw.picture(-3, -1.5, "parechemin.png",3,1);
		StdDraw.picture(1, -1.5, "parechemin.png",3,1);
		StdDraw.picture(-3, -1.6, "singleR.png",2,0.5);
		StdDraw.picture(1, -1.6, "multi.png",2,0.5);
		Lancement.test=1;
		Thread.sleep(200);
	}
	
	public static void choix_multiPlayer() throws InterruptedException{
		StdDraw.picture(-3, -1.5, "parechemin.png",3,1);
		StdDraw.picture(1, -1.5, "parechemin.png",3,1);
		StdDraw.picture(-3, -1.6, "single.png",2,0.5);
		StdDraw.picture(1, -1.6, "multiR.png",2,0.5);
		Lancement.test=2;
		Thread.sleep(200);
	}
	
	public static void annonceFinDePhase(Joueur A, Joueur B) {
		for (int i=0;i<50;i++) {
			StdDraw.picture(0, 0, "fondNoir.jpg",i*0.1,i*0.1); //au final on a 5 en largeur et en hauteur (=50*0.1)
			StdDraw.show(20);
		}
		StdDraw.text(0, 2.5-0.5, "FIN DE LA PHASE");
		StdDraw.text(0, 2.5-0.7, "(Appuyez sur entrée pour passer à la phase suivante)");
		StdDraw.text(-2+0.8, 2.5-1.5, "Score "+A.name+" : ");
		StdDraw.text(-2+1.8,2.5-1.5, Integer.toString(A.score));
		StdDraw.text(-2+0.8, 2.5-2.7, "Score "+B.name+" : ");
		StdDraw.text(-2+1.8,2.5-2.7, Integer.toString(B.score));
		StdDraw.text(0, 2.5-3.5, "VAINQUEUR TEMPORAIRE : ");
		if (A.score>B.score) {
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.text(0, 2.5-3.8, A.name);
		}
		if (A.score<B.score) {
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.text(0, 2.5-3.8, B.name);
		}
		if (A.score==B.score){
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.text(0,2.5-3.8,"Egalité");
		}
		StdDraw.show(20);
	}
	
	public static void annonceFinDeJeu(Joueur A, Joueur B) throws InterruptedException{
		for (int i=0;i<50;i++) {
			StdDraw.picture(0, 0, "fondNoir.jpg",i*0.1,i*0.1); //au final on a 5 en largeur et en hauteur (=50*0.1)
			StdDraw.show(20);
		}
		StdDraw.text(0, 2.5-0.5, "FIN DU JEU");
		StdDraw.text(-2+0.8, 2.5-1.3, "Score "+A.name+" : ");
		StdDraw.text(-2+1.8,2.5-1.3, Integer.toString(A.score));
		StdDraw.text(-2+0.8, 2.5-1.8, "Score "+B.name+" : ");
		StdDraw.text(-2+1.8,2.5-1.8, Integer.toString(B.score));
		StdDraw.text(0, 2.5-2.5, "GRAND VAINQUEUR : ");
		if (A.score>B.score) {
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.text(0, 2.5-2.8, A.name);
		}
		if (A.score<B.score) {
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.text(0, 2.5-2.8, B.name);
		}
		if (A.score==B.score){
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.text(0,2.5-2.8,"Egalité");
		}
		StdDraw.picture(-1.2, -1.5, "rej.png",1.9,1.3);
		StdDraw.picture(1.2, -1.5, "quit.png",1.9,1.3);
		StdDraw.show(20);
		while(true) {
			double pox;
			double poy;

			if (StdDraw.isMousePressed()) {
				pox = StdDraw.mouseX();
				poy =StdDraw.mouseY();
				try {
					Thread.sleep(200);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			if (pox>=0.38 && pox<=1.96 && poy>=-1.69 && poy<=-1.23) {
			//	Animation qui apparait quand on a clique le bouton quitter
				for (int i=0;i<100;i++) {
				StdDraw.picture(-1, 100-i, "voletFerme.jpg",8,8);
				StdDraw.show(20);
				}
				
			}
			if (pox>=-2.01 && pox<=-0.42 && poy>=-1.69 && poy<=-1.23) {
			//	Pour rejouer
				A.score_provisoire = 0;
				B.score_provisoire = 0;
				A.position = 3.1;
				B.position = 3.1;
				A.pos_tab = -1;
				A.nb_tresor = 0;
				A.game=1;
				B.pos_tab = -1;
				B.nb_tresor = 0;
				B.game=0;
				Phase.phase =1;
				A.score =0;
				B.score =0;
				Phase.C= new Cave(1);
				Phase.D = new Cave(2);
				Phase.E = new Cave(3);
				Phase.F = new Oxygene(Phase.C.niveaux +Phase.D.niveaux+Phase.E.niveaux);
				Phase.nb_niveaux_initial = (int)(Phase.C.niveaux +Phase.D.niveaux+Phase.E.niveaux);
				while (!(Phase.posito.isEmpty())) {
					Phase.posito.remove(0);
				}
				Phase.pas = (Phase.HAUTEUR-0.2)/(Phase.C.niveaux +Phase.D.niveaux+Phase.E.niveaux);
				while (!(Phase.prems.isEmpty())) {
					Phase.prems.remove(0);
				}
				while (!(Phase.deuz.isEmpty())) {
					Phase.deuz.remove(0);
				}
				while (!(Phase.troiz.isEmpty())) {
					Phase.troiz.remove(0);
				}
				
				while(!(A.coffreBas.isEmpty())) {
					A.coffreBas.remove(0);
				}
				while(!(B.coffreBas.isEmpty())) {
					B.coffreBas.remove(0);
				}
				while(!(A.Intermediaire.isEmpty())) {
					A.Intermediaire.remove(0);
				}
				while(!(B.Intermediaire.isEmpty())) {
					B.Intermediaire.remove(0);
				}
				Lancement.test=0;
				Lancement.lancer();
			}
			}
		}
		
	}
}
